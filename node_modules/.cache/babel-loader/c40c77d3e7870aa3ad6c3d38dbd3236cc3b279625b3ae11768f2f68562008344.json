{"ast":null,"code":"var _jsxFileName = \"/Users/reagankoo/Downloads/main-master 2/src/Chatbot.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useEffect, useRef } from 'react';\nimport './Chatbot.scss';\nimport { Link } from 'react-router-dom';\nimport Nav from './components/Nav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api_key = process.env.REACT_APP_OPENAI_API_KEY; // API 키 환경 변수에서 로드\nconst isMobileDevice = () => {\n  return /Mobi|Android/i.test(navigator.userAgent);\n};\nconst Message = ({\n  isUser,\n  text,\n  type\n}) => {\n  // URL을 찾아 하이퍼링크로 변환\n  const formatLink = text => {\n    const urlRegex = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#/%=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])|(\\bwww\\.[a-z0-9-]+\\.[a-z0-9\\/\\-]+)/ig;\n    return text.split(urlRegex).map((part, index) => {\n      if (part && part.match(urlRegex)) {\n        // URL이 'http' 또는 'https'로 시작하지 않는 경우에만 'http://' 추가\n        const url = part.startsWith('http') ? part : `http://${part}`;\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          href: url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 16\n        }, this);\n      } else {\n        // URL이 아니면 일반 텍스트\n        return part;\n      }\n    });\n  };\n  const formatText = text => {\n    if (typeof text !== 'string') {\n      // 만약 text가 문자열이 아니라면 적절하게 처리하세요 (예: 오류 메시지 반환 또는 다른 방식으로 처리)\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Error: \\uC798\\uBABB\\uB41C \\uD14D\\uC2A4\\uD2B8 \\uD615\\uC2DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }, this);\n    }\n    return text.split(/(```.*?```)/gs).map((part, index) => {\n      if (part.startsWith(\"```\") && part.endsWith(\"```\")) {\n        // 코드 블록 내의 줄바꿈을 <br />로 바꾸기\n        const codeContent = part.slice(3, -3).replace(/\\n/g, '<br />');\n        return /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            dangerouslySetInnerHTML: {\n              __html: codeContent\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 16\n        }, this);\n      } else {\n        // 일반 텍스트에서 줄바꿈 문자를 <br/>로 바꾸기\n        const lines = part.split(/\\n/).reduce((acc, line, lineIndex) => {\n          if (line !== '') {\n            acc.push( /*#__PURE__*/_jsxDEV(\"span\", {\n              children: formatLink(line)\n            }, `${index}-${lineIndex}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 22\n            }, this));\n          }\n          acc.push( /*#__PURE__*/_jsxDEV(\"br\", {}, `br-${index}-${lineIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 20\n          }, this));\n          return acc;\n        }, []);\n        lines.pop();\n        return lines;\n      }\n    });\n  };\n\n  // // 코드 블록, 문단 분리, URL 링크 처리 및 번호 목록 굵게 표시\n  // const formatText = (text) => {\n  //   return text.split(/(```.*?```)/gs).map((part, index) => {\n  //     if (part.startsWith(\"```\") && part.endsWith(\"```\")) {\n  //       return <pre key={index}><code>{part.slice(3, -3)}</code></pre>;\n  //     } else {\n  //       return part.split(/\\n/).map((line, lineIndex) => {\n  //         // 번호 목록 감지 및 굵게 표시\n  //         if (line.match(/^\\d+\\./)) {\n  //           return <p key={`${index}-${lineIndex}`}><strong>{formatLink(line)}</strong></p>;\n  //         }\n  //         return <p key={`${index}-${lineIndex}`}>{formatLink(line)}</p>;\n  //       });\n  //     }\n  //   });\n  // };\n\n  const renderContent = () => {\n    if (type === 'image') {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: text,\n        alt: \"Uploaded\",\n        style: {\n          maxWidth: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 14\n      }, this);\n    } else {\n      return formatText(text);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${isUser ? 'user' : 'gpt'}`,\n    children: renderContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_c = Message;\nconst MessageList = ({\n  messages\n}) => {\n  _s();\n  const messagesEndRef = useRef(null); // 스크롤 이동을 위한 ref 생성\n\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-list\",\n    children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n      isUser: msg.isUser,\n      text: msg.text,\n      type: msg.type\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 7\n  }, this);\n};\n_s(MessageList, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n_c2 = MessageList;\nconst TextInputBox = ({\n  onSendMessage,\n  setInputType\n}) => {\n  _s2();\n  const [message, setMessage] = useState('');\n  //const [inputType, setInputType] = useState('text'); // 입력 타입\n\n  const handleSend = () => {\n    if (message.trim()) {\n      onSendMessage(message);\n      setMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      onKeyPress: e => e.key === 'Enter' && handleSend()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setInputType('image'),\n      className: \"button\",\n      children: \"Switch to Image Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendButton, {\n      onSend: handleSend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s2(TextInputBox, \"l8KXAebGu4sZHsyCIQX7P8si41w=\");\n_c3 = TextInputBox;\nconst ImageInputBox = ({\n  onSendImage,\n  setInputType\n}) => {\n  _s3();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const fileInputRef = useRef(null); // 파일 입력 필드 참조 생성\n\n  const handleFileChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setSelectedFile(event.target.files[0]);\n    }\n  };\n  const handleSendImage = () => {\n    if (selectedFile) {\n      onSendImage(selectedFile);\n      setSelectedFile(null); // 선택된 파일 초기화\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\"; // 파일 입력 필드 초기화\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: fileInputRef,\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setInputType('text'),\n      className: \"button\",\n      children: \"Switch to Text Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendImage,\n      className: \"button\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s3(ImageInputBox, \"hhxgHKAK5BrX2AE4ZC4QwC5gB5A=\");\n_c4 = ImageInputBox;\nconst SendButton = ({\n  onSend\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: onSend,\n  className: \"send-button\",\n  children: \"Send\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 173,\n  columnNumber: 3\n}, this);\n_c5 = SendButton;\nconst Chatbot = () => {\n  _s4();\n  var _messages;\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태\n  const [summaries, setSummaries] = useState([]);\n  const [shouldFetchSummary, setShouldFetchSummary] = useState(false);\n  const [inputType, setInputType] = useState('text');\n  const [serverData, setServerData] = useState(null);\n  const sendLogToServer = async messages => {\n    try {\n      await fetch('http://127.0.0.1:8000/save-log', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messages\n        }) // 수정된 부분\n      });\n    } catch (error) {\n      console.error('Error sending log to server:', error);\n    }\n  };\n  const handleSendMessage = async text => {\n    if (text.trim()) {\n      const newMessages = [...messages, {\n        text,\n        isUser: true\n      }];\n      setMessages(newMessages);\n      setIsLoading(true);\n      const chatMessages = newMessages.slice(-2).map(m => {\n        if (m.isUser) {\n          let content;\n          if (m.text.length <= 10) {\n            content = `${m.text}에 대해 짧은 답변을 생성해줘.`;\n          } else {\n            content = `${m.text}에 대해 대답해줘. 답변이 길다면 1.~ 2.~ 이런 식으로 번호를 매겨줘. 가독성을 위해 문단을 구분해줘. 추천할 웹사이트가 있다면 링크를 추천해줘. 이 메시지에 대한 내용은 답변에 중복 생성하지 마.`;\n          }\n          return {\n            role: 'user',\n            content: content\n          };\n        } else {\n          // GPT의 응답 메시지 (이 부분은 일반적으로 포함되지 않음)\n          return {\n            role: 'assistant',\n            content: `${m.text}에 대해 친절하게 설명드리겠습니다.`\n          };\n        }\n      });\n      console.log({\n        chatMessages\n      });\n      const sendChatMessagesToServer = async chatMessages => {\n        try {\n          const textData = chatMessages.map(msg => `${msg.role}: ${msg.content}`).join('\\n');\n          const question = await fetch('http://127.0.0.1:8000/chat2', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              text_data: textData\n            })\n          });\n          if (!question.ok) {\n            throw new Error('서버 응답이 실패했습니다.');\n          }\n          const serverData = await question.json();\n          console.log('서버 응답:', serverData);\n          setServerData(serverData);\n          return serverData;\n        } catch (error) {\n          console.error('서버와의 통신 중 오류 발생:', error.message);\n          return null;\n        }\n      };\n      try {\n        const data = await sendChatMessagesToServer(chatMessages);\n        console.log('서버 응답2:', data);\n        console.log('데이터 타입:', typeof data);\n        //const Textdata = JSON.stringify(data);\n        //const rangchainAnswer= Textdata.replace('{\"answer\":\"', '').replace('\"}', '');\n        const rangchainAnswer = data.answer ? data.answer : '답변이 없습니다.';\n        console.log('추출된 답변:', rangchainAnswer);\n        const updatedMessages = [...newMessages, {\n          text: rangchainAnswer\n        }];\n        setMessages(updatedMessages);\n        setShouldFetchSummary(true);\n        const recentGPTMessage = updatedMessages; //log 저장\n        await sendLogToServer(recentGPTMessage);\n        localStorage.setItem('chatMessages', JSON.stringify([...newMessages, {\n          text: rangchainAnswer\n        }]));\n\n        // 데스크톱 알림 기능이 있는지 확인하고, 데스크톱 환경인 경우에만 알림 표시\n        if (!isMobileDevice() && typeof Notification !== 'undefined') {\n          if (Notification.permission === 'granted') {\n            new Notification(\"새로운 메시지가 도착했습니다.\", {\n              body: data.choices[0].message.content,\n              icon: '/path/to/icon.png'\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n      setIsLoading(false);\n    }\n  };\n  const lastMessage = (_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.text;\n  const fetchSummary = async () => {\n    setSummaries(prevSummaries => [...prevSummaries, {\n      loading: true,\n      text: \"요약을 생성중입니다..\"\n    }]);\n    const summaryMessages = [{\n      role: 'assistant',\n      content: `${lastMessage}를 3 문장 이내로 요약해줘.`\n    }];\n    const summaryRequestBody = {\n      //model: \"ft:gpt-3.5-turbo-0613:shinkisa::8Wn3OFbA\",\n      model: \"gpt-4\",\n      messages: summaryMessages\n      //max_tokens: 150,\n    };\n    try {\n      const summaryResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: \"Bearer \" + api_key\n        },\n        body: JSON.stringify(summaryRequestBody)\n      });\n      const summaryData = await summaryResponse.json();\n      if (summaryData.choices && summaryData.choices.length > 0 && summaryData.choices[0].message) {\n        // 요약 상태 업데이트\n        setSummaries(prevSummaries => {\n          const updatedSummaries = prevSummaries.map((summary, index) => index === prevSummaries.length - 1 ? {\n            loading: false,\n            text: summaryData.choices[0].message.content\n          } : summary);\n          // 로딩 메시지를 제외한 상태를 로컬 스토리지에 저장\n          localStorage.setItem('chatSummaries', JSON.stringify(updatedSummaries.filter(s => !s.loading)));\n          return updatedSummaries;\n        });\n      } else {\n        console.error('Invalid response from summary API:', summaryData);\n      }\n    } catch (error) {\n      console.error('Error sending summary Message: ', error);\n    }\n  };\n  const handleImageUpload = async file => {\n    const reader = new FileReader();\n    reader.onloadend = async () => {\n      const imageURL = reader.result;\n      const newMessage = {\n        text: imageURL,\n        // 이미지의 Data URL\n        isUser: true,\n        type: 'image'\n      };\n      const updatedMessages = [...messages, newMessage];\n      try {\n        localStorage.setItem('chatMessages', JSON.stringify(updatedMessages));\n      } catch (error) {\n        if (error.name === 'QuotaExceededError') {\n          console.error('로컬 스토리지 용량 초과:', error);\n          const fallbackMessage = {\n            text: 'image',\n            // 이미지 URL 대신 'image' 문자열 저장\n            isUser: true,\n            type: 'text'\n          };\n          const fallbackMessages = [...messages, fallbackMessage];\n          localStorage.setItem('chatMessages', JSON.stringify(fallbackMessages));\n          setMessages(fallbackMessages);\n          const recentfallbackMessage = fallbackMessages.slice(-1)[0]; //log 저장\n          await sendLogToServer(recentfallbackMessage);\n        } else {\n          console.error('Error while saving to localStorage:', error);\n        }\n      }\n      setMessages(updatedMessages);\n      //localStorage.setItem('chatMessages', JSON.stringify(updatedMessages));\n      setIsLoading(true);\n      const requestBody = {\n        model: \"gpt-4-vision-preview\",\n        messages: [{\n          \"role\": \"user\",\n          \"content\": [{\n            \"type\": \"text\",\n            \"text\": \"이 이미지에 대해서 300자 이내로 간단히 설명해줘. 만약 code error에 관한 것이라면 해결법을 알려줘. 1.~, 2.~ 이렇게 번호를 매겨서 설명해줘. 가독성을 위해 문단을 구분해줘. 이 메시지에 대한 내용은 답변에 중복 생성하지 마.\"\n          }, {\n            \"type\": \"image_url\",\n            \"image_url\": {\n              \"url\": imageURL\n            }\n          }]\n        }],\n        max_tokens: 500\n      };\n      try {\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${api_key}`\n          },\n          body: JSON.stringify(requestBody)\n        });\n        const data = await response.json();\n        if (data.choices && data.choices.length > 0 && data.choices[0].message) {\n          setShouldFetchSummary(true);\n          const descriptionMessage = {\n            text: data.choices[0].message.content,\n            isUser: false,\n            type: 'text' // 이 부분은 텍스트 메시지로 처리\n          };\n          setMessages(prevMessages => [...prevMessages, descriptionMessage]);\n          localStorage.setItem('chatMessages', JSON.stringify([...updatedMessages, descriptionMessage]));\n          const recentGPTimageMessage = updatedMessages.slice(-1)[0]; //log 저장\n          await sendLogToServer(recentGPTimageMessage);\n        } else {\n          console.error('Invalid response from the API:', data);\n        }\n      } catch (error) {\n        console.error('Error sending image:', error);\n      }\n      setIsLoading(false);\n    };\n    reader.readAsDataURL(file);\n  };\n  const clearAll = () => {\n    // 사용자에게 확인 요청\n    const confirmClear = window.confirm(\"모든 대화 기록을 삭제하시겠습니까?\");\n\n    // 사용자가 '확인'을 누른 경우\n    if (confirmClear) {\n      setMessages([]);\n      setSummaries([]);\n      localStorage.removeItem('chatMessages');\n      localStorage.removeItem('chatSummaries');\n    }\n  };\n  useEffect(() => {\n    // 대화 내용 로드\n    const savedMessages = localStorage.getItem('chatMessages');\n    if (savedMessages) {\n      setMessages(JSON.parse(savedMessages));\n    } else {\n      // 로컬 스토리지에 저장된 메시지가 없을 경우, 초기 메시지 설정\n      const initialMessage = {\n        text: \"안녕하세요! 무엇을 도와드릴까요?\",\n        isUser: false,\n        type: 'text'\n      };\n      setMessages([initialMessage]);\n    }\n\n    // 요약 카드 로드\n    const savedSummaries = localStorage.getItem('chatSummaries');\n    if (savedSummaries) {\n      setSummaries(JSON.parse(savedSummaries));\n    }\n  }, []);\n  useEffect(() => {\n    if (!isMobileDevice()) {\n      if (Notification.permission === 'default') {\n        Notification.requestPermission();\n      }\n    }\n    if (shouldFetchSummary && messages.length > 0) {\n      const lastMessageText = messages[messages.length - 1].text;\n      fetchSummary(lastMessageText);\n      setShouldFetchSummary(false);\n    }\n  }, [messages, shouldFetchSummary]);\n\n  //loading animation\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  useEffect(() => {\n    let interval;\n    if (isLoading) {\n      setLoadingProgress(0);\n      interval = setInterval(() => {\n        setLoadingProgress(prev => {\n          const nextProgress = prev + 0.1; // 작은 값으로 더 자주 업데이트\n          if (nextProgress >= 100) {\n            clearInterval(interval);\n            return 100;\n          }\n          return nextProgress;\n        });\n      }, 50); // 50ms마다 실행하여 더 자주 업데이트\n    } else {\n      setLoadingProgress(0);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isLoading]);\n  const LoadingOverlay = ({\n    isLoading,\n    loadingProgress\n  }) => {\n    if (!isLoading) return null;\n    const maskStyle = {\n      transform: `translateY(${100 - loadingProgress}%)`\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-circle\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-mask\",\n          style: maskStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"loading-text\",\n          children: `${loadingProgress.toFixed(0)}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB2F5\\uBCC0\\uC744 \\uC5F4\\uC2EC\\uD788 \\uC0DD\\uC131\\uC911\\uC785\\uB2C8\\uB2E4. \\uC7A0\\uC2DC\\uB9CC \\uAE30\\uB2E4\\uB824\\uC8FC\\uC138\\uC694!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearAll,\n        className: \"clear-button\",\n        children: \"Clean\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot\",\n      children: [/*#__PURE__*/_jsxDEV(LoadingOverlay, {\n        isLoading: isLoading,\n        loadingProgress: loadingProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this), inputType === 'text' ? /*#__PURE__*/_jsxDEV(TextInputBox, {\n          onSendMessage: handleSendMessage,\n          setInputType: setInputType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(ImageInputBox, {\n          onSendImage: handleImageUpload,\n          setInputType: setInputType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-container\",\n        children: summaries.map((summary, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"GPT \\uB2F5\\uBCC0 \\uC694\\uC57D - \", index + 1, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: summary.loading ? summary.text : summary.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 521,\n    columnNumber: 5\n  }, this);\n};\n_s4(Chatbot, \"DelxrY56qtcnWvNkkBCF1M5RTDw=\");\n_c6 = Chatbot;\nexport default Chatbot;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Message\");\n$RefreshReg$(_c2, \"MessageList\");\n$RefreshReg$(_c3, \"TextInputBox\");\n$RefreshReg$(_c4, \"ImageInputBox\");\n$RefreshReg$(_c5, \"SendButton\");\n$RefreshReg$(_c6, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","Nav","jsxDEV","_jsxDEV","api_key","process","env","REACT_APP_OPENAI_API_KEY","isMobileDevice","test","navigator","userAgent","Message","isUser","text","type","formatLink","urlRegex","split","map","part","index","match","url","startsWith","href","target","rel","children","fileName","_jsxFileName","lineNumber","columnNumber","formatText","endsWith","codeContent","slice","replace","dangerouslySetInnerHTML","__html","lines","reduce","acc","line","lineIndex","push","pop","renderContent","src","alt","style","maxWidth","className","_c","MessageList","messages","_s","messagesEndRef","current","scrollIntoView","behavior","msg","ref","_c2","TextInputBox","onSendMessage","setInputType","_s2","message","setMessage","handleSend","trim","value","onChange","e","onKeyPress","key","onClick","SendButton","onSend","_c3","ImageInputBox","onSendImage","_s3","selectedFile","setSelectedFile","fileInputRef","handleFileChange","event","files","handleSendImage","accept","_c4","_c5","Chatbot","_s4","_messages","setMessages","isLoading","setIsLoading","summaries","setSummaries","shouldFetchSummary","setShouldFetchSummary","inputType","serverData","setServerData","sendLogToServer","fetch","method","headers","body","JSON","stringify","error","console","handleSendMessage","newMessages","chatMessages","m","content","length","role","log","sendChatMessagesToServer","textData","join","question","text_data","ok","Error","json","data","rangchainAnswer","answer","updatedMessages","recentGPTMessage","localStorage","setItem","Notification","permission","choices","icon","lastMessage","fetchSummary","prevSummaries","loading","summaryMessages","summaryRequestBody","model","summaryResponse","Authorization","summaryData","updatedSummaries","summary","filter","s","handleImageUpload","file","reader","FileReader","onloadend","imageURL","result","newMessage","name","fallbackMessage","fallbackMessages","recentfallbackMessage","requestBody","max_tokens","response","descriptionMessage","prevMessages","recentGPTimageMessage","readAsDataURL","clearAll","confirmClear","window","confirm","removeItem","savedMessages","getItem","parse","initialMessage","savedSummaries","requestPermission","lastMessageText","loadingProgress","setLoadingProgress","interval","setInterval","prev","nextProgress","clearInterval","LoadingOverlay","maskStyle","transform","toFixed","to","_c6","$RefreshReg$"],"sources":["/Users/reagankoo/Downloads/main-master 2/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {useEffect, useRef} from 'react';\nimport './Chatbot.scss';\nimport { Link } from 'react-router-dom';\nimport Nav from './components/Nav';\n\nconst api_key = process.env.REACT_APP_OPENAI_API_KEY; // API 키 환경 변수에서 로드\nconst isMobileDevice = () => {\n  return /Mobi|Android/i.test(navigator.userAgent);\n};\n\nconst Message = ({ isUser, text, type }) => {\n  // URL을 찾아 하이퍼링크로 변환\n  const formatLink = (text) => {\n    const urlRegex = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#/%=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])|(\\bwww\\.[a-z0-9-]+\\.[a-z0-9\\/\\-]+)/ig;\n    return text.split(urlRegex).map((part, index) => {\n      if (part && part.match(urlRegex)) {\n        // URL이 'http' 또는 'https'로 시작하지 않는 경우에만 'http://' 추가\n        const url = part.startsWith('http') ? part : `http://${part}`;\n        return <a key={index} href={url} target=\"_blank\" rel=\"noopener noreferrer\">{part}</a>;\n        \n      } else {\n        // URL이 아니면 일반 텍스트\n        return part;\n      }\n    });\n  };\n\n\n\n\n  const formatText = (text) => {\n    if (typeof text !== 'string') {\n      // 만약 text가 문자열이 아니라면 적절하게 처리하세요 (예: 오류 메시지 반환 또는 다른 방식으로 처리)\n      return <p>Error: 잘못된 텍스트 형식</p>;\n    }\n  \n    return text.split(/(```.*?```)/gs).map((part, index) => {\n      if (part.startsWith(\"```\") && part.endsWith(\"```\")) {\n        // 코드 블록 내의 줄바꿈을 <br />로 바꾸기\n        const codeContent = part.slice(3, -3).replace(/\\n/g, '<br />');\n        return <pre key={index}><code dangerouslySetInnerHTML={{ __html: codeContent }} /></pre>;\n      } else {\n        // 일반 텍스트에서 줄바꿈 문자를 <br/>로 바꾸기\n        const lines = part.split(/\\n/).reduce((acc, line, lineIndex) => {\n          if (line !== '') {\n            acc.push(<span key={`${index}-${lineIndex}`}>{formatLink(line)}</span>);\n          }\n          acc.push(<br key={`br-${index}-${lineIndex}`} />);\n          return acc;\n        }, []);\n  \n        lines.pop();\n        return lines;\n      }\n    });\n  };\n  \n\n  // // 코드 블록, 문단 분리, URL 링크 처리 및 번호 목록 굵게 표시\n  // const formatText = (text) => {\n  //   return text.split(/(```.*?```)/gs).map((part, index) => {\n  //     if (part.startsWith(\"```\") && part.endsWith(\"```\")) {\n  //       return <pre key={index}><code>{part.slice(3, -3)}</code></pre>;\n  //     } else {\n  //       return part.split(/\\n/).map((line, lineIndex) => {\n  //         // 번호 목록 감지 및 굵게 표시\n  //         if (line.match(/^\\d+\\./)) {\n  //           return <p key={`${index}-${lineIndex}`}><strong>{formatLink(line)}</strong></p>;\n  //         }\n  //         return <p key={`${index}-${lineIndex}`}>{formatLink(line)}</p>;\n  //       });\n  //     }\n  //   });\n  // };\n\n  const renderContent = () => {\n    if (type === 'image') {\n      return <img src={text} alt=\"Uploaded\" style={{ maxWidth: '100%' }} />;\n    } else {\n      return formatText(text);\n    }\n  };\n\n  return (\n    <div className={`message ${isUser ? 'user' : 'gpt'}`}>\n      {renderContent()}\n    </div>\n  );\n};\n\nconst MessageList = ({ messages }) => {\n    const messagesEndRef = useRef(null); // 스크롤 이동을 위한 ref 생성\n  \n    useEffect(() => {\n        if (messagesEndRef.current) {\n          messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n      }, [messages]);\n  \n    return (\n      <div className=\"message-list\">\n        {messages.map((msg, index) => (\n          <Message key={index} isUser={msg.isUser} text={msg.text} type={msg.type} />\n        ))}\n        <div ref={messagesEndRef} /> {/* 스크롤 이동을 위한 빈 div */}\n      </div>\n    );\n  };\n\nconst TextInputBox = ({ onSendMessage, setInputType }) => {\n  const [message, setMessage] = useState('');\n  //const [inputType, setInputType] = useState('text'); // 입력 타입\n\n  const handleSend = () => {\n    if (message.trim()) {\n      onSendMessage(message);\n      setMessage('');\n    }\n  };\n\n  return (\n    <div className=\"input-box\">\n      <input\n        type=\"text\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n      />\n      <button onClick={() => setInputType('image')} className=\"button\">Switch to Image Upload</button>\n      <SendButton onSend={handleSend} />\n    </div>\n  );\n};\n\nconst ImageInputBox = ({ onSendImage, setInputType }) => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const fileInputRef = useRef(null); // 파일 입력 필드 참조 생성\n\n  const handleFileChange = (event) => {\n    if (event.target.files && event.target.files[0]) {\n      setSelectedFile(event.target.files[0]);\n    }\n  };\n\n  const handleSendImage = () => {\n    if (selectedFile) {\n      onSendImage(selectedFile);\n      setSelectedFile(null); // 선택된 파일 초기화\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\"; // 파일 입력 필드 초기화\n      }\n    }\n  };\n\n  return (\n    <div className=\"input-box\">\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileChange}\n      />    \n      <button onClick={() => setInputType('text')} className=\"button\">Switch to Text Input</button>\n      <button onClick={handleSendImage} className=\"button\">Send</button>\n    </div>\n  );\n};\n\n\n\nconst SendButton = ({ onSend }) => (\n  <button onClick={onSend} className=\"send-button\">\n    Send\n  </button>\n);\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // 로딩 상태\n  const [summaries, setSummaries] = useState([]);\n  const [shouldFetchSummary, setShouldFetchSummary] = useState(false);\n  const [inputType, setInputType] = useState('text');\n  const [serverData, setServerData] = useState(null);\n\n  const sendLogToServer = async (messages) => {\n   \n    try {\n        await fetch('http://127.0.0.1:8000/save-log', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({messages})  // 수정된 부분\n        });\n    } catch (error) {\n        console.error('Error sending log to server:', error);\n    }\n};\n\n\n  const handleSendMessage = async (text) => {\n    if (text.trim()) {\n      const newMessages = [...messages, { text, isUser: true }];\n      setMessages(newMessages);\n      setIsLoading(true);\n      \n      const chatMessages = newMessages.slice(-2).map((m) => {\n        if (m.isUser) {\n          let content;\n          if (m.text.length <= 10) {\n            content = `${m.text}에 대해 짧은 답변을 생성해줘.`\n          } else {\n            content = `${m.text}에 대해 대답해줘. 답변이 길다면 1.~ 2.~ 이런 식으로 번호를 매겨줘. 가독성을 위해 문단을 구분해줘. 추천할 웹사이트가 있다면 링크를 추천해줘. 이 메시지에 대한 내용은 답변에 중복 생성하지 마.`;\n          }\n          return {\n            role: 'user',\n            content: content\n          };\n        } else {\n          // GPT의 응답 메시지 (이 부분은 일반적으로 포함되지 않음)\n          return {\n            role: 'assistant',\n            content: `${m.text}에 대해 친절하게 설명드리겠습니다.`\n          };\n        }\n      });\n\n      console.log({chatMessages});\n      \n\n      const sendChatMessagesToServer = async (chatMessages) => {\n   \n        try {\n          const textData = chatMessages.map(msg => `${msg.role}: ${msg.content}`).join('\\n');\n          const question = await fetch('http://127.0.0.1:8000/chat2', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ text_data: textData }),\n          });\n      \n          if (!question.ok) {\n            throw new Error('서버 응답이 실패했습니다.');\n          }\n          \n          const serverData = await question.json();\n          console.log('서버 응답:', serverData);\n          setServerData(serverData);\n          return serverData;\n\n        } catch (error) {\n          console.error('서버와의 통신 중 오류 발생:', error.message);\n          return null;\n        }\n      };\n\n      try {\n   \n        const data = await sendChatMessagesToServer(chatMessages);\n        console.log('서버 응답2:', data);\n        console.log('데이터 타입:', typeof data);\n        //const Textdata = JSON.stringify(data);\n        //const rangchainAnswer= Textdata.replace('{\"answer\":\"', '').replace('\"}', '');\n        const rangchainAnswer = data.answer ? data.answer : '답변이 없습니다.';\n        console.log('추출된 답변:',rangchainAnswer);\n        const updatedMessages = [...newMessages, { text: rangchainAnswer}];\n        setMessages(updatedMessages);\n        setShouldFetchSummary(true);\n\n        const recentGPTMessage = updatedMessages; //log 저장\n        await sendLogToServer(recentGPTMessage);\n\n        localStorage.setItem('chatMessages', JSON.stringify([...newMessages, { text: rangchainAnswer }]));\n\n        // 데스크톱 알림 기능이 있는지 확인하고, 데스크톱 환경인 경우에만 알림 표시\n      if (!isMobileDevice() && typeof Notification !== 'undefined') {\n        if (Notification.permission === 'granted') {\n          new Notification(\"새로운 메시지가 도착했습니다.\", {\n            body: data.choices[0].message.content,\n            icon: '/path/to/icon.png'\n          });\n        }\n        }\n \n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n\n    setIsLoading(false);\n  }\n};\n\n  const lastMessage = messages[messages.length -1]?.text;\n\n  const fetchSummary = async () => {\n    setSummaries(prevSummaries => [...prevSummaries, {loading: true, text: \"요약을 생성중입니다..\"}]);\n    const summaryMessages = [{\n      role: 'assistant',\n      content: `${lastMessage}를 3 문장 이내로 요약해줘.`\n    }];\n  \n    const summaryRequestBody = {\n      //model: \"ft:gpt-3.5-turbo-0613:shinkisa::8Wn3OFbA\",\n      model: \"gpt-4\",\n      messages: summaryMessages,\n      //max_tokens: 150,\n    };\n\n    try {\n      const summaryResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: \"Bearer \"+ api_key,\n        },\n        body: JSON.stringify(summaryRequestBody),\n      });\n\n      const summaryData = await summaryResponse.json();\n\n      if (summaryData.choices && summaryData.choices.length > 0 && summaryData.choices[0].message) {\n        // 요약 상태 업데이트\n        setSummaries(prevSummaries => {\n          const updatedSummaries = prevSummaries.map((summary, index) => \n            index === prevSummaries.length - 1 \n              ? { loading: false, text: summaryData.choices[0].message.content }\n              : summary\n          );\n          // 로딩 메시지를 제외한 상태를 로컬 스토리지에 저장\n          localStorage.setItem('chatSummaries', JSON.stringify(updatedSummaries.filter(s => !s.loading)));\n          return updatedSummaries;\n        });\n      } else{\n        console.error('Invalid response from summary API:',summaryData);\n      }\n    } catch(error){\n      console.error('Error sending summary Message: ',error);\n    }\n  };\n\n  const handleImageUpload = async (file) => {\n    const reader = new FileReader();\n    reader.onloadend = async () => {\n      const imageURL = reader.result;\n      const newMessage = {\n        text: imageURL, // 이미지의 Data URL\n        isUser: true,\n        type: 'image'\n      };\n      const updatedMessages = [...messages, newMessage];\n\n      try {\n        localStorage.setItem('chatMessages', JSON.stringify(updatedMessages));\n      } catch (error) {\n        if(error.name === 'QuotaExceededError'){\n          console.error('로컬 스토리지 용량 초과:',error);\n          const fallbackMessage = {\n            text: 'image', // 이미지 URL 대신 'image' 문자열 저장\n            isUser: true,\n            type: 'text'\n          };\n          const fallbackMessages = [...messages, fallbackMessage];\n          localStorage.setItem('chatMessages', JSON.stringify(fallbackMessages));\n          setMessages(fallbackMessages);\n\n          const recentfallbackMessage = fallbackMessages.slice(-1)[0]; //log 저장\n          await sendLogToServer(recentfallbackMessage);\n        } else {\n          console.error('Error while saving to localStorage:', error);\n        }\n      }\n\n      setMessages(updatedMessages);\n      //localStorage.setItem('chatMessages', JSON.stringify(updatedMessages));\n      setIsLoading(true);\n\n      const requestBody = {\n        model: \"gpt-4-vision-preview\",\n        messages: [\n          {\n            \"role\": \"user\",\n            \"content\": [\n              {\"type\": \"text\", \"text\": \"이 이미지에 대해서 300자 이내로 간단히 설명해줘. 만약 code error에 관한 것이라면 해결법을 알려줘. 1.~, 2.~ 이렇게 번호를 매겨서 설명해줘. 가독성을 위해 문단을 구분해줘. 이 메시지에 대한 내용은 답변에 중복 생성하지 마.\"},\n              {\"type\": \"image_url\", \"image_url\":{\"url\": imageURL}}\n            ]\n          }\n        ], max_tokens: 500,\n      };\n\n      try {\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${api_key}`\n          },\n          body: JSON.stringify(requestBody)\n        });\n  \n        const data = await response.json();\n        if (data.choices && data.choices.length > 0 && data.choices[0].message) {\n          setShouldFetchSummary(true);\n          const descriptionMessage = {\n            text: data.choices[0].message.content, \n            isUser: false,\n            type: 'text' // 이 부분은 텍스트 메시지로 처리\n          };\n          setMessages(prevMessages => [...prevMessages, descriptionMessage]);\n          localStorage.setItem('chatMessages', JSON.stringify([...updatedMessages, descriptionMessage]));     \n\n          const recentGPTimageMessage = updatedMessages.slice(-1)[0]; //log 저장\n          await sendLogToServer(recentGPTimageMessage);\n        } else {\n          console.error('Invalid response from the API:', data);\n        }\n      } catch (error) {\n        console.error('Error sending image:', error);\n      }\n      setIsLoading(false);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const clearAll = () => {\n    // 사용자에게 확인 요청\n    const confirmClear = window.confirm(\"모든 대화 기록을 삭제하시겠습니까?\");\n  \n    // 사용자가 '확인'을 누른 경우\n    if (confirmClear) {\n      setMessages([]);\n      setSummaries([]);\n  \n      localStorage.removeItem('chatMessages');\n      localStorage.removeItem('chatSummaries');\n    }\n  };\n\n  useEffect(() => {\n    // 대화 내용 로드\n    const savedMessages = localStorage.getItem('chatMessages');\n    if(savedMessages){\n      setMessages(JSON.parse(savedMessages));\n    } else {\n      // 로컬 스토리지에 저장된 메시지가 없을 경우, 초기 메시지 설정\n      const initialMessage = {\n        text: \"안녕하세요! 무엇을 도와드릴까요?\",\n        isUser: false,\n        type: 'text'\n      };\n      setMessages([initialMessage]);\n    }\n\n    // 요약 카드 로드\n    const savedSummaries = localStorage.getItem('chatSummaries');\n    if (savedSummaries) {\n      setSummaries(JSON.parse(savedSummaries));\n    }\n  }, []);\n  \n  useEffect(() => {\n    if(!isMobileDevice()){\n    if(Notification.permission === 'default'){\n      Notification.requestPermission();\n    } }\n    if(shouldFetchSummary && messages.length > 0){\n      const lastMessageText = messages[messages.length -1].text;\n      fetchSummary(lastMessageText);\n      setShouldFetchSummary(false);\n    }\n  }, [messages, shouldFetchSummary]);\n\n  //loading animation\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  useEffect(() => {\n    let interval;\n    if (isLoading) {\n      setLoadingProgress(0);\n      interval = setInterval(() => {\n        setLoadingProgress(prev => {\n          const nextProgress = prev + 0.1; // 작은 값으로 더 자주 업데이트\n          if (nextProgress >= 100) {\n            clearInterval(interval);\n            return 100;\n          }\n          return nextProgress;\n        });\n      }, 50); // 50ms마다 실행하여 더 자주 업데이트\n    } else {\n      setLoadingProgress(0);\n    }\n  \n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isLoading]);\n\n  const LoadingOverlay = ({ isLoading, loadingProgress }) => {\n    if (!isLoading) return null;\n  \n    const maskStyle = {\n      transform: `translateY(${100 - loadingProgress}%)`\n    };\n  \n    return (\n      <div className=\"loading-overlay\">\n        <div className=\"loading-circle\">\n          <div className=\"loading-mask\" style={maskStyle}></div>\n          <span className=\"loading-text\">{`${loadingProgress.toFixed(0)}%`}</span>\n        </div>\n        <div className=\"loading\">답변을 열심히 생성중입니다. 잠시만 기다려주세요!</div>\n      </div>\n    );\n  };\n\n\n  return (\n    <div>\n      <Nav/>\n      <div className=\"nav\">\n        <Link to=\"/\">Home</Link>\n        <br></br>\n        <button onClick={clearAll} className=\"clear-button\">Clean</button>\n      </div>\n      <div className=\"chatbot\">\n      <LoadingOverlay isLoading={isLoading} loadingProgress={loadingProgress} />\n\n        <div className=\"chat-container\">\n          <MessageList messages={messages} />\n          {inputType === 'text' ?\n          <TextInputBox onSendMessage={handleSendMessage} setInputType={setInputType}/> :\n          <ImageInputBox onSendImage={handleImageUpload} setInputType={setInputType}/>\n        }\n          \n        </div>\n        <div className=\"summary-container\">\n          {summaries.map((summary, index) => (\n            <div className=\"summary\" key={index}>\n              <h4>GPT 답변 요약 - {index+1} </h4>\n              <p>{summary.loading ? summary.text : summary.text}</p>\n            </div>\n          ))}\n        </div>\n      </div>    \n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}